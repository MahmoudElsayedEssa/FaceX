plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.compose.compiler)
    id("dagger.hilt.android.plugin")
    id("com.google.dagger.hilt.android")
    id("kotlin-kapt")
    id("com.google.devtools.ksp")
    id("nebula.lint")

}


android {
    namespace 'com.example.facex'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.facex"
        minSdk 27
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a' //'x86', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        benchmark {
            initWith release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }
    bundle {
        abi {
            enableSplit true
        }
        density {
            enableSplit true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17

    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        mlModelBinding true
    }
    aaptOptions {
        noCompress "tflite"
    }
    externalNativeBuild {
        cmake {
            path = file("src/main/cpp/CMakeLists.txt")
            version = "3.22.1"
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
    composeCompiler {
        reportsDestination = layout.buildDirectory.dir("compose_compiler")
        metricsDestination = layout.buildDirectory.dir("compose_compiler")
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    ndkVersion '27.0.11718014 rc1'
}

gradleLint {
    rules = ['dependency-patch']
}

dependencies {
    // Core Android & AndroidX
    implementation project(':opencv')

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.work.runtime.ktx)
    implementation(libs.androidx.tools.core)
    implementation(libs.androidx.material)
    implementation libs.androidx.material3
    implementation(libs.ui)

    implementation(libs.kotlinx.coroutines.core)
    implementation libs.kotlinx.coroutines.play.services

    // Compose
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation libs.core
    implementation libs.androidx.animation.core.android
    implementation libs.androidx.animation.android
    implementation libs.androidx.tv.material
    implementation libs.androidx.animation.core.android
    implementation libs.androidx.runtime
    implementation libs.androidx.foundation.layout.android
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)


    // Camera
    implementation(libs.androidx.camera.camera2)
    implementation(libs.androidx.camera.lifecycle)
    implementation(libs.androidx.camera.view)

    // Dependency Injection - Hilt
    implementation(libs.hilt.android)
    implementation(libs.androidx.hilt.navigation.fragment)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.androidx.hilt.work)
    ksp(libs.hilt.compiler)
    ksp(libs.dagger.compiler)
    ksp(libs.androidx.hilt.compiler)

    // Room Database
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    ksp(libs.androidx.room.compiler)
    testImplementation(libs.androidx.room.testing)

    // ML & Computer Vision
    implementation(libs.tensorflow.lite.metadata)
    implementation(libs.tensorflow.lite.support)
    implementation(libs.tensorflow.lite)
    implementation(libs.tensorflow.lite.api)
    implementation(libs.tensorflow.lite.gpu)
    implementation(libs.tensorflow.lite.gpu.api)
    implementation(libs.tensorflow.lite.gpu.delegate.plugin)
    implementation(libs.face.detection)

    // Navigation
    implementation(libs.androidx.navigation.compose)
    implementation(libs.androidx.navigation.runtime.ktx)
    implementation(libs.androidx.navigation.ui.ktx)

    // Testing
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)

    // Utilities
    implementation(libs.accompanist.permissions)
    implementation(libs.androidx.concurrent.futures)
    implementation(libs.androidx.concurrent.futures.ktx)
    implementation(libs.symbol.processing.api)
    implementation("com.airbnb.android:lottie-compose:6.3.0")


    implementation "androidx.window:window:1.3.0"

    implementation('com.google.mediapipe:tasks-vision:0.10.14') {
        exclude group: 'com.google.protobuf', module: 'protobuf-javalite'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
}
configurations.configureEach {
    resolutionStrategy {
        force 'com.google.protobuf:protobuf-java:3.22.3'
        force 'com.google.protobuf:protobuf-javalite:3.22.3'
    }
}